f(s3, model = spde_rec) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper)
A_rec_repl     <- inla.spde.make.A(mesh, loc = as.matrix(co_stat_utm),
repl = eq, n.repl = n_eq_used)
idx_rec_repl   <- inla.spde.make.index("idx_rec_repl",spde_rec$n.spde,
n.repl = n_eq_used)
r1 <- idx_rec_repl$idx_rec_repl.repl
r2 <- r1
r3 <- r1
r12 <- r1
r13 <- r1
r23 <- r1
form_3_repl <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec, replicate = r1) +
f(s2, model = spde_rec, replicate = r2) +
f(s3, model = spde_rec, replicate = r3) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r12) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r13) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper, replicate = r23)
form_3_repl <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec, replicate = r1) +
f(s2, model = spde_rec, replicate = r2) +
f(s3, model = spde_rec, replicate = r3) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r12) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r13) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper, replicate = r23)
stack_pga <- inla.stack(
data = list(y = cbind(dat_used$deltaWS_pga, NA, NA)),
A = list(A_rec_repl),
effects = list(list(intercept1 = 1,
s1 = 1:spde_rec$n.spde,
r1 = r1)
)
)
stack_t02 <- inla.stack(
data = list(y = cbind(NA, dat_used$deltaWS_t02, NA)),
A = list(A_rec_repl),
effects = list(list(intercept2 = 1,
s2 = 1:spde_rec$n.spde,
s12 = 1:spde_rec$n.spde,
r2 = r2,
r12 = r12
)
)
)
stack_t1 <- inla.stack(
data = list(y = cbind(NA, NA, dat_used$deltaWS_t1)),
A = list(A_rec_repl),
effects = list(list(intercept3 = 1,
s3 = 1:spde_rec$n.spde,
s13 = 1:spde_rec$n.spde,
s23 = 1:spde_rec$n.spde,
r3 = r3,
r13 = r13,
r23 = r23
)
)
)
stack <- inla.stack(stack_pga, stack_t02, stack_t1)
#### coreg model two periods
hyper <- list(beta = list(prior = 'normal', param = c(0, 10)))
prior_hyper <- list(hyper = list(prec = prior_prec_phiSS_lg))
fit_inla_coreg3 <- inla(form_3_repl,
data = inla.stack.data(stack),
family=rep('gaussian', 3),
control.family = list(prior_hyper, prior_hyper, prior_hyper),
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb')
)
summary(fit_inla_coreg3)
########## event list
ev_list <- c(1001, 1021, 1045, 1050, 1051, 1060, 1101, 1125, 1138, 1170, 1221) # norcal
#ev_list <- c(1001, 1021, 1045, 1050)
#ev_list <- c(1021)
#ev_list <- c(113, 114, 118, 125, 127, 151, 158, 179, 280, 1001, 1002, 1003, 1006) # M > 5, neq > 50
#ev_list <- c(158, 125)
#ev_list <- c(1018, 1011, 1002, 1028, 1019, 127, 113, 167, 1003, 163, 1007) # socal
#ev_list <- c(163, 179, 1011, 1028, 1046, 1050, 1079) # based on variogram
#ev_list <- unique(c(1001, 1021, 1045, 1050, 1051, 1060, 1101, 1125, 1138, 1170, 1221,
#                    113, 114, 118, 125, 127, 151, 158, 179, 280, 1001, 1002, 1003, 1006,
#                    1018, 1011, 1002, 1028, 1019, 127, 113, 167, 1003, 163, 1007,
#                    163, 179, 1011, 1028, 1046, 1050, 1079)) # all together
reg_name <- "norcal"
dat_used <- data_reg[data_reg$eqid %in% ev_list
& data_reg$Rrup <= 100,]
#& !is.na(data_reg$deltaWS_t02)
#& !is.na(data_reg$deltaWS_t1),]
dim(dat_used)
dat_used <- data.frame()
for(i in 1:length(ev_list)) {
tmp <- data_reg[data_reg$eqid == ev_list[i]
& data_reg$Rrup <= 100,]
tmp2 <- names(which(table(tmp$statid) > 1))
tmp <- tmp[tmp$statid %notin% tmp2,]
dat_used <- rbind(dat_used, tmp)
}
#dat_used <- dat_used_cpo
dim(dat_used)
n_rec_used <- nrow(dat_used)
n_eq_used <- length(ev_list)
n_stat_used <- length(unique(dat_used$stat))
#SET EVENT INDICES
eqid <- dat_used$eqid
eq  <- array(0,n_rec_used)
eqid_uni <- unique(eqid)
for (i in 1:n_eq_used) {
indi <- ifelse(eqid %in% eqid_uni[i],i,0)
eq <- eq + indi
}
dat_used$eq <- eq
long_lat_ev <- cbind(dat_used$Lon_ev, dat_used$Lat_ev)
long_lat_stat <- cbind(dat_used$Lon_stat, dat_used$Lat_stat)
#convert from degrees to UTM
utm_zone <- 10
co_eq_utm <- LongLatToUTM(long_lat_ev[,1],long_lat_ev[,2], utm_zone)[,c(2,3)]/1000
co_stat_utm <- LongLatToUTM(long_lat_stat[,1],long_lat_stat[,2], utm_zone)[,c(2,3)]/1000
start <- c(min(which(eq == 1)), min(which(eq == 2)), min(which(eq == 3)), min(which(eq == 4)))
end <- c(max(which(eq == 1)), max(which(eq == 2)), max(which(eq == 3)), max(which(eq == 4)))
start <- vector(length = n_eq_used)
end <- vector(length = n_eq_used)
num_eq <- vector(length = n_eq_used)
for(i in 1:n_eq_used) {
start[i] <- min(which(eq == i))
end[i] <- max(which(eq == i))
num_eq[i] <- end[i] - start[i] + 1
}
max_num <- max(num_eq)
target <- "dws"
resc <- "noresc"
if(target == "dws") {
y_target <- cbind(dat_used$deltaWS_pga, dat_used$deltaWS_t02, dat_used$deltaWS_t1)
#y_target <- cbind(dat_used$deltaWS_pga, dat_used$deltaWS_t01,
#                  dat_used$deltaWS_t02, dat_used$deltaWS_t05,
#                  dat_used$deltaWS_t1, dat_used$deltaWS_t2)
#y_target <- cbind(dat_used$deltaWS_pga,
#                  dat_used$deltaWS_t02,
#                  dat_used$deltaWS_t1)
#y_target <- cbind(dat_used$deltaWS_pga, dat_used$deltaWS_t02,
#                  dat_used$deltaWS_t05, dat_used$deltaWS_t1)
#y_dws <- cbind(dat_used$deltaWS_pga, dat_used$deltaWS_t02, dat_used$deltaWS_t1)
#y_dws <- cbind(dat_used$deltaWS_pga, dat_used$deltaWS_t1)
#y_target <- cbind(dat_used$deltaWS_pga / sd(dat_used$deltaWS_pga),
#                  dat_used$deltaWS_t02 / sd(dat_used$deltaWS_t02),
#                  dat_used$deltaWS_t1 / sd(dat_used$deltaWS_t1))
} else {
#y_target <- cbind(dat_used$deltaW_pga, dat_used$deltaW_t02, dat_used$deltaW_t1)
y_target <- cbind(dat_used$deltaW_pga, dat_used$deltaW_t01,
dat_used$deltaW_t02, dat_used$deltaW_t05,
dat_used$deltaW_t1, dat_used$deltaW_t2)
y_target <- cbind(dat_used$deltaW_pga, dat_used$deltaW_t01,
dat_used$deltaW_t02, dat_used$deltaW_t05,
dat_used$deltaW_t1, dat_used$deltaW_t2)
}
n_per <- ncol(y_target)
#ind_na_eq <- matrix(0, nrow = n_per, ncol = max_num)
ind_na_eq <- array(0, dim = c(n_per, n_eq_used, max_num))
len_na_eq <- matrix(nrow = n_per, ncol = n_eq_used)
for(p in 1:n_per) {
if(resc == "resc") {
y_target[,p] <- y_target[,p] / sd(y_target[!is.na(y_target[,p]),p])
}
for(i in 1:n_eq_used) {
tmp <- which(!is.na(y_target[eq == i,p]))
ind_na_eq[p, i, 1:length(tmp)] <- tmp + start[i] - 1
len_na_eq[p,i] <- length(tmp)
}
}
y_target[is.na(y_target)] <- -999.
#different ways to generate test locations
# regular grid
co_test <- unique(c(seq(-10,10,1),seq(-50,50,5)))
x_test <- griddf <- expand.grid(x = seq(from = -50, by = 5, l = 21),
y = seq(from = -50, by = 5, l = 21))
x_test <- griddf <- expand.grid(x = co_test,
y = co_test)
n_test <- nrow(x_test)
# random sampling
# random locations - geneates dffeet length scales
n_test <- 700
set.seed(8572)
x_test <- cbind(runif(n_test, min = -50,max = 50),
runif(n_test,  min = -50,max = 50))
data_list <- list(N = n_rec_used,
NEQ = n_eq_used,
NP = n_per,
M = max_num,
N_test = n_test,
R = dat_used$Rrup,
Y = y_target,
X = co_stat_utm,
X_test = x_test,
start = start,
end = end,
ind_eq = ind_na_eq,
len_eq = len_na_eq
)
model <- 'gmm_coreg2c_dc_m_gq'
print(model)
file <- file.path(dir_stan, sprintf("%s.stan", model))
mod <- cmdstan_model(file)
fit <- mod$sample(
data = data_list,
seed = 5618,
chains = 4,
iter_sampling = 200,
iter_warmup = 200,
refresh = 10,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2
)
fit$cmdstan_diagnose()
n_rec_used
summarise_draws(subset(draws, variable=c('A_coreg'), regex=TRUE))
summarise_draws(subset(draws, variable=c('T_coreg'), regex=TRUE))
summarise_draws(subset(draws, variable=c('T_coreg2'), regex=TRUE))
fit$cmdstan_diagnose()
draws <- fit$draws()
summarise_draws(subset(draws, variable=c('ic', 'theta', 'ell'), regex=TRUE))
summarise_draws(subset(draws, variable=c('lambda'), regex=TRUE))
summarise_draws(subset(draws, variable=c('^ell'), regex=TRUE))
summarise_draws(subset(draws, variable=c('^theta'), regex=TRUE))
summarise_draws(subset(draws, variable=c('mu_log_ell_1', 'sigma_log_ell_1')))
#ev_list <- c(113, 114, 118, 125, 127, 151, 158, 179, 280, 1001, 1002, 1003, 1006)
dat_used <- data_reg[data_reg$eqid %in% ev_list
& data_reg$Rrup <= 100,]
dim(dat_used)
n_rec_used <- nrow(dat_used)
n_eq_used <- length(ev_list)
n_stat_used <- length(unique(dat_used$stat))
#SET EVENT INDICES
eqid <- dat_used$eqid
eq  <- array(0,n_rec_used)
eqid_uni <- unique(eqid)
for (i in 1:n_eq_used) {
indi <- ifelse(eqid %in% eqid_uni[i],i,0)
eq <- eq + indi
}
dat_used$eq <- eq
long_lat_ev <- cbind(dat_used$Lon_ev, dat_used$Lat_ev)
long_lat_stat <- cbind(dat_used$Lon_stat, dat_used$Lat_stat)
#convert from degrees to UTM
utm_zone <- 10
co_eq_utm <- LongLatToUTM(long_lat_ev[,1],long_lat_ev[,2], utm_zone)[,c(2,3)]/1000
co_stat_utm <- LongLatToUTM(long_lat_stat[,1],long_lat_stat[,2], utm_zone)[,c(2,3)]/1000
coords <- unique(rbind(as.matrix(co_eq_utm), as.matrix(co_stat_utm)))
max.edge2    <- 2 #0.04
bound.outer2 <- 20 #0.3
mesh = inla.mesh.2d(loc=as.matrix(coords),
max.edge = c(1,5)*max.edge2,
# - use 5 times max.edge in the outer extension/offset/boundary
cutoff = max.edge2,#0.029,
offset = c(5 * max.edge2, bound.outer2))
ggplot() + theme_bw() + gg(mesh) +
geom_point(data = as.data.frame(co_stat_utm), aes(x=X,y=Y), color = "red") +
geom_point(data = as.data.frame(co_eq_utm), aes(x=X,y=Y), color = "blue") +
labs(x="X (km)", y="Y (km)") +
theme(axis.title = element_text(size=30), axis.text.y = element_text(size=20),
axis.text.x = element_text(size=20))
########### spatial model
# spde prior and define model
spde_rec <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = c(30, 0.5),
# P(sigma > 1) = 0.01
prior.sigma = c(.3, 0.01))
form_3 <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec) + f(s2, model = spde_rec) +
f(s3, model = spde_rec) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper)
#### coreg model two periods
hyper <- list(beta = list(prior = 'normal', param = c(0, 10)))
prior_hyper <- list(hyper = list(prec = prior_prec_phiSS_lg))
A_rec_repl     <- inla.spde.make.A(mesh, loc = as.matrix(co_stat_utm),
repl = eq, n.repl = n_eq_used)
idx_rec_repl   <- inla.spde.make.index("idx_rec_repl",spde_rec$n.spde,
n.repl = n_eq_used)
r1 <- idx_rec_repl$idx_rec_repl.repl
r2 <- r1
r3 <- r1
r12 <- r1
r13 <- r1
r23 <- r1
form_3_repl <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec, replicate = r1) +
f(s2, model = spde_rec, replicate = r2) +
f(s3, model = spde_rec, replicate = r3) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r12) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r13) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper, replicate = r23)
stack_pga <- inla.stack(
data = list(y = cbind(dat_used$deltaWS_pga, NA, NA)),
A = list(A_rec_repl),
effects = list(list(intercept1 = 1,
s1 = 1:spde_rec$n.spde,
r1 = r1)
)
)
stack_t02 <- inla.stack(
data = list(y = cbind(NA, dat_used$deltaWS_t02, NA)),
A = list(A_rec_repl),
effects = list(list(intercept2 = 1,
s2 = 1:spde_rec$n.spde,
s12 = 1:spde_rec$n.spde,
r2 = r2,
r12 = r12
)
)
)
stack_t1 <- inla.stack(
data = list(y = cbind(NA, NA, dat_used$deltaWS_t1)),
A = list(A_rec_repl),
effects = list(list(intercept3 = 1,
s3 = 1:spde_rec$n.spde,
s13 = 1:spde_rec$n.spde,
s23 = 1:spde_rec$n.spde,
r3 = r3,
r13 = r13,
r23 = r23
)
)
)
stack <- inla.stack(stack_pga, stack_t02, stack_t1)
fit_inla_coreg3 <- inla(form_3_repl,
data = inla.stack.data(stack),
family=rep('gaussian', 3),
control.family = list(prior_hyper, prior_hyper, prior_hyper),
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb')
)
fit_inla_coreg3 <- inla(form_3_repl,
data = inla.stack.data(stack),
family=rep('gaussian', 3),
control.family = list(prior_hyper, prior_hyper, prior_hyper),
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb')
)
eq
prior_hyper
#### coreg model two periods
hyper <- list(beta = list(prior = 'normal', param = c(0, 10)))
prior_hyper <- list(hyper = list(prec = prior_prec_phiSS_lg))
A_rec_repl     <- inla.spde.make.A(mesh, loc = as.matrix(co_stat_utm),
repl = eq, n.repl = n_eq_used)
idx_rec_repl   <- inla.spde.make.index("idx_rec_repl",spde_rec$n.spde,
n.repl = n_eq_used)
r1 <- idx_rec_repl$idx_rec_repl.repl
r2 <- r1
r3 <- r1
r12 <- r1
r13 <- r1
r23 <- r1
form_3_repl <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec, replicate = r1) +
f(s2, model = spde_rec, replicate = r2) +
f(s3, model = spde_rec, replicate = r3) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r12) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r13) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper, replicate = r23)
stack_pga <- inla.stack(
data = list(y = cbind(dat_used$deltaWS_pga, NA, NA)),
A = list(A_rec_repl),
effects = list(list(intercept1 = 1,
s1 = 1:spde_rec$n.spde,
r1 = r1)
)
)
stack_t02 <- inla.stack(
data = list(y = cbind(NA, dat_used$deltaWS_t02, NA)),
A = list(A_rec_repl),
effects = list(list(intercept2 = 1,
s2 = 1:spde_rec$n.spde,
s12 = 1:spde_rec$n.spde,
r2 = r2,
r12 = r12
)
)
)
stack_t1 <- inla.stack(
data = list(y = cbind(NA, NA, dat_used$deltaWS_t1)),
A = list(A_rec_repl),
effects = list(list(intercept3 = 1,
s3 = 1:spde_rec$n.spde,
s13 = 1:spde_rec$n.spde,
s23 = 1:spde_rec$n.spde,
r3 = r3,
r13 = r13,
r23 = r23
)
)
)
stack <- inla.stack(stack_pga, stack_t02, stack_t1)
fit_inla_coreg3 <- inla(form_3_repl,
data = inla.stack.data(stack),
family=rep('gaussian', 3),
control.family = list(prior_hyper, prior_hyper, prior_hyper),
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb')
)
prior_hyper
spde_rec
form_3_repl
hyper
ev_list <- c(1001, 1021, 1045, 1050, 1051, 1060, 1101, 1125, 1138, 1170, 1221)
dat_used <- data_reg[data_reg$eqid %in% ev_list
& data_reg$Rrup <= 100,]
dim(dat_used)
n_rec_used <- nrow(dat_used)
n_eq_used <- length(ev_list)
n_stat_used <- length(unique(dat_used$stat))
#SET EVENT INDICES
eqid <- dat_used$eqid
eq  <- array(0,n_rec_used)
eqid_uni <- unique(eqid)
for (i in 1:n_eq_used) {
indi <- ifelse(eqid %in% eqid_uni[i],i,0)
eq <- eq + indi
}
dat_used$eq <- eq
long_lat_ev <- cbind(dat_used$Lon_ev, dat_used$Lat_ev)
long_lat_stat <- cbind(dat_used$Lon_stat, dat_used$Lat_stat)
#convert from degrees to UTM
utm_zone <- 10
co_eq_utm <- LongLatToUTM(long_lat_ev[,1],long_lat_ev[,2], utm_zone)[,c(2,3)]/1000
co_stat_utm <- LongLatToUTM(long_lat_stat[,1],long_lat_stat[,2], utm_zone)[,c(2,3)]/1000
coords <- unique(rbind(as.matrix(co_eq_utm), as.matrix(co_stat_utm)))
max.edge2    <- 2 #0.04
bound.outer2 <- 20 #0.3
mesh = inla.mesh.2d(loc=as.matrix(coords),
max.edge = c(1,5)*max.edge2,
# - use 5 times max.edge in the outer extension/offset/boundary
cutoff = max.edge2,#0.029,
offset = c(5 * max.edge2, bound.outer2))
ggplot() + theme_bw() + gg(mesh) +
geom_point(data = as.data.frame(co_stat_utm), aes(x=X,y=Y), color = "red") +
geom_point(data = as.data.frame(co_eq_utm), aes(x=X,y=Y), color = "blue") +
labs(x="X (km)", y="Y (km)") +
theme(axis.title = element_text(size=30), axis.text.y = element_text(size=20),
axis.text.x = element_text(size=20))
########### spatial model
# spde prior and define model
spde_rec <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = c(100, 0.99),
# P(sigma > 1) = 0.01
prior.sigma = c(.5, 0.01))
A_rec_repl     <- inla.spde.make.A(mesh, loc = as.matrix(co_stat_utm),
repl = eq, n.repl = n_eq_used)
idx_rec_repl   <- inla.spde.make.index("idx_rec_repl",spde_rec$n.spde,
n.repl = n_eq_used)
r1 <- idx_rec_repl$idx_rec_repl.repl
r2 <- r1
r3 <- r1
r12 <- r1
r13 <- r1
r23 <- r1
form_3_repl <- y ~ 0 + intercept1 + intercept2 + intercept3 +
f(s1, model = spde_rec, replicate = r1) +
f(s2, model = spde_rec, replicate = r2) +
f(s3, model = spde_rec, replicate = r3) +
f(s12, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r12) +
f(s13, copy = "s1", fixed = FALSE, hyper = hyper, replicate = r13) +
f(s23, copy = "s2", fixed = FALSE, hyper = hyper, replicate = r23)
stack_pga <- inla.stack(
data = list(y = cbind(dat_used$deltaWS_pga, NA, NA)),
A = list(A_rec_repl),
effects = list(list(intercept1 = 1,
s1 = 1:spde_rec$n.spde,
r1 = r1)
)
)
stack_t02 <- inla.stack(
data = list(y = cbind(NA, dat_used$deltaWS_t02, NA)),
A = list(A_rec_repl),
effects = list(list(intercept2 = 1,
s2 = 1:spde_rec$n.spde,
s12 = 1:spde_rec$n.spde,
r2 = r2,
r12 = r12
)
)
)
stack_t1 <- inla.stack(
data = list(y = cbind(NA, NA, dat_used$deltaWS_t1)),
A = list(A_rec_repl),
effects = list(list(intercept3 = 1,
s3 = 1:spde_rec$n.spde,
s13 = 1:spde_rec$n.spde,
s23 = 1:spde_rec$n.spde,
r3 = r3,
r13 = r13,
r23 = r23
)
)
)
stack <- inla.stack(stack_pga, stack_t02, stack_t1)
fit_inla_coreg3 <- inla(form_3_repl,
data = inla.stack.data(stack),
family=rep('gaussian', 3),
control.family = list(prior_hyper, prior_hyper, prior_hyper),
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb')
)
gc()
